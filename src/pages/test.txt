import React, { useRef, useEffect, useState } from 'react';
import { Box, Button, Center, Divider, Flex, FormControl, Grid, GridItem, Heading, Image, Input, Select, Text, Textarea, VStack, useToast } from '@chakra-ui/react';
import { useNavigate } from 'react-router-dom';
import repairimage from "../media/repair.png";
import devices from "../media/icons/devicessideways.png";
import laptopOutline from "../media/icons/laptopoutline.png";
import phoneOutline from "../media/icons/phoneoutline.png";
import desktopOutline from "../media/icons/desktopoutline.png";
import otherOutline from "../media/icons/otheroutline.png";
import emailjs from 'emailjs-com';
import { useDropzone } from 'react-dropzone';

const Quote2 = () => {
  const inputRef = useRef(null);
  const selectRef = useRef(null);
  const [containerHeight, setContainerHeight] = useState('auto');
  const [selectedDevice, setSelectedDevice] = useState('laptop');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState([]); // State to store selected files
  const toast = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    if (inputRef.current && selectRef.current) {
      const inputHeight = inputRef.current.offsetHeight;
      const selectHeight = selectRef.current.offsetHeight;
      const totalHeight = inputHeight + selectHeight + 20; // Adjust the 20px margin as needed
      setContainerHeight(totalHeight);
    }
  }, []);

  const handleDeviceChange = (event) => {
    setSelectedDevice(event.target.value);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setIsLoading(true);

    const form = event.target;
    if (!form.checkValidity()) {
      form.reportValidity();
      setIsLoading(false);
      return;
    }

    const formData = new FormData(form);
    const email = formData.get('email');
    if (!isValidEmail(email)) {
      toast({
        title: 'Invalid Email',
        description: 'Please enter a valid email address.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
      setIsLoading(false);
      return;
    }

    const phone = formData.get('phone');
    if (!isValidPhone(phone)) {
      toast({
        title: 'Invalid Phone Number',
        description: 'Please enter a valid phone number.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
      setIsLoading(false);
      return;
    }

    try {
      await sendEmail(formData);

      const response = await fetch('http://localhost:1337/api/quotes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          "data": {
            "Name": formData.get('name'),
            "Phone": formData.get('phone'),
            "Email": formData.get('email'),
            "DeviceType": formData.get('device-type'),
            "DeviceName": formData.get('device-name'),
          }
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to create customer');
      }

      navigate('/landing');
    } catch (error) {
      console.error('Error:', error);
      toast({
        title: 'Error',
        description: 'There was an issue submitting your request. Please try again later.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const sendEmail = async (data) => {
    try {
      await emailjs.send("service_omro8as", "template_s2h32uf", {
        to_email: data.get('email'),
        customer_name: data.get('name'),
        customer_phone: data.get('phone'),
        message: `Device Type: ${data.get('device-type')}, Device Name: ${data.get('device-name')}`,
      }, "noSKe9q4pG9tTE82k");

      console.log('Email sent successfully!');
    } catch (error) {
      console.error('Error sending email:', error);
      throw error;
    }
  };

  const isValidEmail = (email) => {
    return /\S+@\S+\.\S+/.test(email);
  };

  const isValidPhone = (phone) => {
    return /^\+?\d{0,13}$/.test(phone);
  };

  const onDrop = (acceptedFiles) => {
    const filesWithPreview = acceptedFiles.map(file => Object.assign(file, {
      preview: URL.createObjectURL(file)
    }));
    setSelectedFiles([...selectedFiles, ...filesWithPreview]);
  };

  const removeFile = (fileToRemove) => {
    const updatedFiles = selectedFiles.filter(file => file !== fileToRemove);
    setSelectedFiles(updatedFiles);
  };

  const { getRootProps, getInputProps } = useDropzone({
    accept: 'image/*',
    onDrop,
  });

  return (
    <Box display="flex" minHeight="100vh">
      <Box
        flex="0.5"
        position="relative"
        display="flex"
        justifyContent="center"
        alignItems="center"
        bgImage={repairimage}
        bgPosition="center"
        bgRepeat="no-repeat"
        bgSize="cover"
        _before={{
          content: '""',
          position: 'absolute',
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          bgGradient: 'linear(to-l, rgba(29, 29, 29, 1), rgba(29, 29, 29, 0.6))'
        }}
      >
        <Text position="relative" fontSize="6vw" color="white" fontFamily="Cocogoose" lineHeight="6vw" textAlign="center">
          Start a Repair
        </Text>
      </Box>
      <Grid
        flex="1"
        flexDirection="column"
        justifyContent="center"
        bg="bg.300"
        color="white"
        padding="8"
        h="100vh"
        gridRow="2fr 3fr 2fr"
      >
        <VStack mt="2vw">
          <Heading fontFamily="Cocogoose" fontSize="3vw"> {deviceName} Repair </Heading>
          <Divider />
          <Text mb="8" fontSize="1.1rem" textAlign="center">
            Next, we'll just need some information about your problem.
          </Text>
        </VStack>
        <Flex flexDir="column" width="100%" as="form" onSubmit={handleSubmit}>
          <Flex width="100%" gap="1vw" mb="4">
            <Box flexDir="row" flex="1">
              <FormControl id="device-type" mb="4">
                <Select
                  ref={selectRef}
                  variant="filled"
                  placeholder="Select problem type"
                  bg="bg.400"
                  color="white"
                  _placeholder={{ color: 'gray.500' }}
                  onChange={handleDeviceChange}
                  name="device-type"
                  required
                  sx={{
                    '> option': {
                      background: 'bg.400',
                    },
                  }}
                >
                  <option value="Phone">Phone</option>
                  <option value="Laptop">Laptop</option>
                  <option value="Desktop">Desktop</option>
                  <option value="Other">Other</option>
                </Select>
              </FormControl>
              <FormControl id="device-name">
                <Textarea
                  minH="25vh"
                  ref={inputRef}
                  type="text"
                  placeholder="Please describe your issue."
                  variant="filled"
                  bg="bg.400"
                  color="white"
                  name="device-name"
                  required
                />
              </FormControl>
            </Box>
            <Flex
              borderRadius="7px"
              flex="1"
              bg="bg.400"
              w="50%"
              height={`${containerHeight}px`}
              justifyContent="center"
              alignItems="center"
            >
              <div {...getRootProps()} style={dropzoneStyles}>
                <input {...getInputProps()} />
                {selectedFiles.length > 0 ? (
                  <Flex direction="column">
                    {selectedFiles.map((file, index) => (
                      <Flex key={index} alignItems="center" mt="2">
                        <Image src={file.preview} alt="Preview" boxSize="100px" objectFit="cover" mr="2" />
                        <Text>{file.name}</Text>
                        <Button ml="2" size="sm" onClick={() => removeFile(file)}>Remove</Button>
                      </Flex>
                    ))}
                  </Flex>
                ) : (
                  <p>Drag 'n' drop some files here, or click to select files</p>
                )}
              </div>
            </Flex>
          </Flex>
            <Center>
              <Button colorScheme="red" bgColor="highlight.500" size="lg" mt="4" type="submit" isLoading={isLoading}>
                Next
              </Button>
            </Center>
          </Flex>
        <GridItem />
      </Grid>
    </Box>
  );
};

const dropzoneStyles = {
  border: '2px dashed #ccc',
  borderRadius: '7px',
  padding: '20px',
  textAlign: 'center',
  width: '100%',
  cursor: 'pointer',
};

export default Quote2;

